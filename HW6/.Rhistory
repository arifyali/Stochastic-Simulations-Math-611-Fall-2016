Gamma(1/2)
?Gamma
Gamma(3)
x = c(169.14353, 135.73850, 102.46566,  80.91151, 148.45425, 144.68948, 106.56257, 104.83559,
94.81216, 109.47048,  95.94150, 123.84673,  87.18401, 104.73420, 111.94364, 119.69467,
151.77627,  81.80692, 116.58660,  98.28933)
mu_1 <- 100
mu_2 <- 120
## as well as the latent variable parameters
tau_1 <- 1-0.7
tau_2 <- 0.7
for( i in 1:10 ) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- tau_1 * dnorm(x, mu_1, sd = sqrt(20))
T_2 <- tau_2 * dnorm(x, mu_2, sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
tau_1 <- mean(P_1)
tau_2 <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1 <- sum( P_1 * x) / sum(P_1)
mu_2 <- sum( P_2 * x) / sum(P_2)
}
mu_1
mu_2
tau_1
tau_2
x = c(169.14353, 135.73850, 102.46566,  80.91151, 148.45425, 144.68948, 106.56257, 104.83559,
94.81216, 109.47048,  95.94150, 123.84673,  87.18401, 104.73420, 111.94364, 119.69467,
151.77627,  81.80692, 116.58660,  98.28933)
mu_1 <- c(100)
mu_2 <- c(120)
## as well as the latent variable parameters
tau_1 <- c(1-0.7)
tau_2 <- c(0.7)
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- tau_1[i] * dnorm(x, mu_1[i], sd = sqrt(20))
T_2 <- tau_2[i] * dnorm(x, mu_2[i], sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
tau_1[i+1] <- mean(P_1)
tau_2[i+1] <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1[i+1] <- sum( P_1 * x) / sum(P_1)
mu_2[i+1] <- sum( P_2 * x) / sum(P_2)
}
data.frame(mu_1, mu_2, tau_2)
data.frame(mu_1, mu_2, tau_2)[-1,]
data.frame(mu_1, mu_2, W = tau_2)[-1,]
for( i in 1:100) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- tau_1[i] * dnorm(x, mu_1[i], sd = sqrt(20))
T_2 <- tau_2[i] * dnorm(x, mu_2[i], sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
tau_1[i+1] <- mean(P_1)
tau_2[i+1] <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1[i+1] <- sum( P_1 * x) / sum(P_1)
mu_2[i+1] <- sum( P_2 * x) / sum(P_2)
}
data.frame(mu_1, mu_2, W = tau_2)[-1,]
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- tau_1[i] * dnorm(x, mu_1[i], sd = sqrt(20))
T_2 <- tau_2[i] * dnorm(x, mu_2[i], sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
tau_1[i+1] <- mean(P_1)
tau_2[i+1] <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1[i+1] <- sum( P_1 * x) / sum(P_1)
mu_2[i+1] <- sum( P_2 * x) / sum(P_2)
}
data.frame(mu_1, mu_2, W = tau_2)[-1,]
mu_1 <- c(100)
mu_2 <- c(120)
## as well as the latent variable parameters
tau_1 <- c(1-0.7) # 1-W
tau_2 <- c(0.7) # W
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- tau_1[i] * dnorm(x, mu_1[i], sd = sqrt(20))
T_2 <- tau_2[i] * dnorm(x, mu_2[i], sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
tau_1[i+1] <- mean(P_1)
tau_2[i+1] <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1[i+1] <- sum( P_1 * x) / sum(P_1)
mu_2[i+1] <- sum( P_2 * x) / sum(P_2)
}
data.frame(mu_1, mu_2, W = tau_2)[-1,]
x = c(169.14353, 135.73850, 102.46566,  80.91151, 148.45425, 144.68948, 106.56257, 104.83559,
94.81216, 109.47048,  95.94150, 123.84673,  87.18401, 104.73420, 111.94364, 119.69467,
151.77627,  81.80692, 116.58660,  98.28933)
mu_1 <- c(100)
mu_2 <- c(120)
## as well as the latent variable parameters
#tau_1 <- c(1-0.7) # 1-W
W <- c(0.7) # W
for( i in 1:12) {
## Given the observed data, as well as the distribution parameters,
## what are the latent variables?
T_1 <- (1-W[i]) * dnorm(x, mu_1[i], sd = sqrt(20))
T_2 <- W[i] * dnorm(x, mu_2[i], sd = sqrt(25))
P_1 <- T_1 / (T_1 + T_2)
P_2 <- T_2 / (T_1 + T_2) ## note: P_2 = 1 - P_1
#tau_1[i+1] <- mean(P_1)
W[i+1] <- mean(P_2)
## Given the observed data, as well as the latent variables,
## what are the population parameters
mu_1[i+1] <- sum( P_1 * x) / sum(P_1)
mu_2[i+1] <- sum( P_2 * x) / sum(P_2)
}
data.frame(mu_1, mu_2, W)[-1,]
P_1
P_1*x
sum(P_1*x)/sum(P_1)
.019*50
0.02*20
.019+20*0.03
library("mixtoolsâ€™")
library("mixtools")
?gammamixEM
?rt
?gamma
?rgamma
f(x) = function(x) dgamma(x, 4.3,6.2)
f = function(x) dgamma(x, 4.3,6.2)
g = function(x) dgamma(x, 4, 7)
Nsim=10^4
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=dt(Y,1)*dnorm(X[t-1])/(dt(X[t-1],1)*dnorm(Y))
X[t]=X[t-1] + (Y-X[t-1])*(runif(1)<rho)
}
mean(X)
plot(X, type = "l")
?GammaDist
GammaDist
GammaDist()
?pnorm
rnorm(1)
dnorm(rnorm(1))
dnorm(rnorm(1))
dnorm(rnorm(1))
dnorm(rnorm(1))
dnorm(runif(1))
dnorm(runif(1))
dnorm(runif(1))
dnorm(runif(1))
dnorm(runif(1))
(Y-X[t-1])*(runif(1)<rho)
mean(X)
4.3/6.3
4.3/6.2
mean(X[-(1:1000)])
hist(X)
f = function(x) dgamma(x, 4.3,6.2)
g = function(x) dgamma(x, 4, 7)
Nsim=10^4
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=f(Y)*g(X[t-1])/(f(X[t-1],1)*g(Y))
X[t]=X[t-1] + (Y-X[t-1])*(runif(1)<rho)
}
mean(X[-(1:1000)])
f = function(x) dgamma(x, 4.3,6.2)
g = function(x) dgamma(x, 4, 7)
Nsim=10^4
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=f(Y)*g(X[t-1])/(f(X[t-1])*g(Y))
X[t]=X[t-1] + (Y-X[t-1])*(runif(1)<rho)
}
mean(X[-(1:1000)])
g(x) = function(x) dgamma(x,5,6)
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=f(Y)*g(X[t-1])/(f(X[t-1])*g(Y))
X[t]=X[t-1] + (Y-X[t-1])*(runif(1)<rho)
}
nburn = 1000
mean(X[-(1:nburn)])
f = function(x) dgamma(x, 4.3,6.2)
g = function(x) dgamma(x, 4, 7)
Nsim=10^4
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
accept = 0
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=f(Y)*g(X[t-1])/(f(X[t-1])*g(Y))
if(runif(1)<rho){
X[t] = Y
accept = accept + 1
}
else{
X[t] =X[t-1]
}
}
nburn = 1000
mean(X[-(1:nburn)])
mean(accept)
accept
sum(accept)/Nsim
g(x) = function(x) dgamma(x,5,6)
X=rgamma(1, 4.3,6.2)    # initialize the chain from the stationary
accept = 0
for (t in 2:Nsim){
Y=rgamma(1, 4,7)   # candidate normal
rho=f(Y)*g(X[t-1])/(f(X[t-1])*g(Y))
if(runif(1)<rho){
X[t] = Y
accept = accept + 1
}
else{
X[t] =X[t-1]
}
}
nburn = 1000
mean(X[-(1:nburn)])
sum(accept)/Nsim
paste("r", gamma())
paste("r", "gamma")
paste("r", "gamma", sep = "")
X = rbinom(1e6,size = 1e6, .5)
head(X)
X = rbinom(1e6,size = 1, .5)
head(X)
sd(X)
X[X==0] = -1
head(X)
sd(X)
var(X)
var(X)/sqrt(1e6)
?sd
mean(X^2) - (mean(X))^2
sqrt(mean(X^2) - (mean(X))^2)/length(X)
sqrt((mean(X^2) - (mean(X))^2)/length(X))
